name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: ${{ secrets.DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_ENV: testing

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_USER: ${{ env.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: actions/setup-php@v5
        with:
          php-version: '8.4'
          extensions: mbstring, pdo_mysql, zip, bcmath, exif, pcntl, gd

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Configure environment
        run: |
          echo "APP_ENV=${{ env.APP_ENV }}" >> .env
          php artisan key:generate --force --env=${{ env.APP_ENV }}
          echo "DB_CONNECTION=${{ env.DB_CONNECTION }}" >> .env
          echo "DB_HOST=${{ env.DB_HOST }}" >> .env
          echo "DB_PORT=${{ env.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ env.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ env.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Install PHP dependencies with Composer
        run: composer install --optimize-autoloader --no-interaction

      - name: Run PHPUnit tests
        run: php artisan test

      - name: Build Docker image
        if: github.event_name == 'push'
        run: docker build -t myapp:${{ github.sha }} .
